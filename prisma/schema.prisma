// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductCategory {
  id              String           @id @default(cuid())
  parentCategory  ProductCategory? @relation("SubCategory")
  childCategory   ProductCategory? @relation("SubCategory", fields: [childCategoryId], references: [id])
  childCategoryId String?          @unique
  categoryName    String
  products        Product[]
  Variation       Variation[]
}

model Product {
  id           String          @id @default(cuid())
  name         String
  description  String
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId   String
  productItems ProductItem[]
}

model ProductItem {
  id              String                 @id @default(cuid())
  product         Product                @relation(fields: [productId], references: [id])
  productId       String
  SKU             String                 @unique
  quantityInStock Int
  price           Decimal                @db.Money
  configuration   ProductConfiguration[]
}

model ProductConfiguration {
  productItem       ProductItem     @relation(fields: [productItemId], references: [id])
  productItemId     String
  variationOption   VariationOption @relation(fields: [variationOptionId], references: [id])
  variationOptionId String

  @@id([productItemId, variationOptionId])
}

model VariationOption {
  id                   String                 @id @default(cuid())
  productConfiguration ProductConfiguration[]
  value                String                 @unique
  variation            Variation              @relation(fields: [variationId], references: [id])
  variationId          String
}

model Variation {
  id                String            @id @default(cuid())
  variationName     String            @unique
  variationOptions  VariationOption[]
  ProductCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id])
  productCategoryId String
}
